
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Solution {
	static ArrayList<Integer>[] adjList;
	static boolean[] visited;
	static List<Integer> max;
	static int ans;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		for(int tc = 1; tc<=10; tc++) {
			st = new StringTokenizer(br.readLine());
			int D = Integer.parseInt(st.nextToken());
			int S = Integer.parseInt(st.nextToken());
			
			adjList = new ArrayList[101];
			for(int i=0; i<=100; i++) {
				adjList[i] = new ArrayList<>();
			}
			
			ans = 0;
			st = new StringTokenizer(br.readLine());
			for(int i=0; i<D/2; i++) {
				adjList[Integer.parseInt(st.nextToken())].add( Integer.parseInt(st.nextToken()));
			}
			
			bfs(S);
			System.out.println("#"+tc+" "+ans);
		}
	}
	
	private static void bfs(int s) {
		Queue<Integer> q = new ArrayDeque<>();
		visited = new boolean[101];
		
		q.offer(s);
		visited[s] = true;
		
		while(!q.isEmpty()) {
			int size = q.size(); 
			max = new ArrayList<>(); //현재 진행하는 정점 넣는 리스트
			for(int n=0; n<size; n++) {
				int now = q.poll();
				max.add(now);
				for(int num : adjList[now]) {
					if(!visited[num]) {
						q.offer(num);
						visited[num] = true;
					}
				}
			}
			// 현재 큐에 들어있던 모든 정점 방문 후 최대값 구하기 (마지막 연락뿐만 아니라 모든 경우계속 갱신)
			ans = Collections.max(max); 
		}
	}

}
