import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;

public class Solution {
	static int n,h,w,min;
	static int[][] map, tmp;
	static int[] num;
	static int[] dr = {-1,1,0,0};
	static int[] dc = {0,0,1,-1};
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		
		for(int tc = 1; tc<=T; tc++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			n = Integer.parseInt(st.nextToken());
			w = Integer.parseInt(st.nextToken());
			h = Integer.parseInt(st.nextToken());
			
			map = new int[h][w];
			tmp = new int[h][w];
			num = new int[n];
			min = Integer.MAX_VALUE;
			
			for(int i=0; i<h; i++) {
				st = new StringTokenizer(br.readLine());
				for(int j=0; j<w; j++) {
					map[i][j] = tmp[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			
			Perm(0);
			System.out.println("#"+tc+" "+min);
		}
	}

	private static void Perm(int cnt) {
		if(cnt == n) {
			play(num);
			min = Math.min(min, count());
			deepcopy();
			return;
		}
		
		for(int i=0; i<w; i++) {
			num[cnt] = i;
			Perm(cnt+1);
		}
		
	}

	private static void deepcopy() {
		for(int i=0; i<h; i++) {
			for(int j=0; j<w; j++) {
				map[i][j] = tmp[i][j];
			}
		}
		
	}

	private static int count() {
		int cnt = 0;
		for(int i=0; i<h; i++) {
			for(int j=0; j<w; j++) {
				if(map[i][j] > 0) {
					cnt++;
				}
			}
		}
		return cnt;
	}

	private static void play(int[] num) {
		int r = 0; 
		int c = 0;
		for(int i=0; i<n; i++) {
			for(int j=0; j<h; j++) {
				if(map[j][num[i]] != 0) {
					r = j;
					c = num[i];
					break;
				}
			}
			bfs(r,c);
			clear();
		}
		
	}

	static Stack<Integer> s = new Stack<>();
	private static void clear() {
		for(int c = 0; c<w; c++) {
			for(int r =0; r<h; r++) {
				if(map[r][c] > 0) {
					s.push(map[r][c]);
					map[r][c] = 0;
				}
			}
			int r = h-1;
			while(!s.isEmpty()) {
				map[r--][c] = s.pop();
			}
		}
		
	}

	private static void bfs(int r, int c) {
		
		Queue<Point> q = new ArrayDeque<>();
		q.add(new Point(r,c, map[r][c]));
		map[r][c] = 0;
		
		while(!q.isEmpty()) {
			Point now = q.poll();
			
			for(int d=0; d<4; d++) {
				for(int p = 1; p<now.num; p++) {
					int nr = now.i + dr[d]*p;
					int nc = now.j + dc[d]*p;
					if(nr>=0 && nr <h && nc>=0 && nc<w && map[nr][nc] != 0) {
						q.add(new Point(nr,nc, map[nr][nc]));
						map[nr][nc] = 0;
					}
					
				}
			}
		}
	}

	static class Point{
		int i,j,num;
		public Point(int i, int j, int num) {
			this.i = i;
			this.j = j;
			this.num = num;
		}
	}
}
