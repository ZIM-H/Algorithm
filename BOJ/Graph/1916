import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        int v = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());

        int[][] adjMatrix = new int[v][v];

        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int from = Integer.parseInt(st.nextToken());
            int to = Integer.parseInt(st.nextToken());

            adjMatrix[from-1][to-1] = Integer.parseInt(st.nextToken());
        }

        st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());

        final int INF = Integer.MAX_VALUE;
        int[] distance = new int[v];
        boolean[] visited = new boolean[v];

        Arrays.fill(distance, INF);
        distance[start-1] = 0;

        for(int i=0; i<v; i++){
            // 미방문 정점 중 가장 가까운 정점 선택
            int now = -1;
            int min = INF;

            for(int j=0; j<v; j++){
                if (!visited[j] && min > distance[j]){
                    min = distance[j];
                    now = j;
                }
            }

            if(now == -1) break;
            visited[now] = true;

            if(now == end-1) break;

            for(int j=0; j<v; j++){
                if(!visited[j] && adjMatrix[now][j] != 0 && distance[j] > min+adjMatrix[now][i]){
                    distance[j] = min + adjMatrix[now][j];
                }
            }
        }

        System.out.println(distance[end-1] != INF? distance[end-1] : -1);
    }
}
