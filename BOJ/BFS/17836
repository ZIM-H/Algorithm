import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Boj_17836_공주님을구해라 {
    static int n,m,t, ans, flag;
    static int[][] map, tmp;
    static int[] dr = {1,0,0};
    static int[] dc = {0,-1,1};
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        t = Integer.parseInt(st.nextToken());

        map = new int[n+1][m+1];
        tmp = new int[n+1][m+1];
        ans = Integer.MAX_VALUE;
        flag = 0;

        for(int i=1; i<=n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=1; j<=m; j++){
                map[i][i] = Integer.parseInt(st.nextToken());
            }
        }

        bfs();
        if(flag == 1) System.out.println("Fail");
        else System.out.println(ans);


    }

    private static void bfs() {
        Queue<Pos> q = new ArrayDeque<>();
        boolean[][] visit = new boolean[n+1][m+1];

        q.add(new Pos(1,1,0));
        visit[1][1] = true;

        while(!q.isEmpty()){
            Pos now = q.poll();

            if(now.r == n && now.c==m){
                ans = Math.min(ans, now.time);
                break;
            }

            if(map[now.r][now.c]==2){
                item(now.r, now.c, now.time);
                System.out.println("검획득!");
                continue;
            }

            if(now.time > t){
                flag = 1;
                break;
            }

            for(int d=0; d<3; d++){
                int nr = now.r + dr[d];
                int nc = now.c + dc[d];
                if(nr<=n && nc<=m && nr>0 && nc>0 &&!visit[nr][nc]&&map[nr][nc]!=1){
                    q.add(new Pos(nr,nc,now.time+1));
                    visit[nr][nc] = true;
                }
            }
        }
    }

    private static void item(int i, int j, int time2) {
        Queue<Pos> q = new ArrayDeque<>();
        boolean[][] visit = new boolean[n+1][m+1];

        q.add(new Pos(i,j,time2));
        visit[i][j] = true;

        while(!q.isEmpty()){
            Pos now = q.poll();

            if(now.r == n && now.c==n){
                ans = Math.min(ans, now.time);
                break;
            }

            for(int d=0; d<3; d++){
                int nr = now.r + dr[d];
                int nc = now.c + dc[d];
                if(nr>0 && nc>0 && nr<=n && nc<=m &&!visit[nr][nc]){
                    q.add(new Pos(nr, nc, now.time+1));
                    visit[nr][nc] = true;
                }
            }
        }
    }

    static class Pos{
        int r, c, time;
        public Pos(int r, int c, int time){
            this.r = r;
            this.c = c;
            this.time = time;
        }
    }
}
