import java.util.*;
import java.io.*;

public class Main {
	// DFS 2차원 배열
	static int[][] Dgraph = new int[1001][1001];
	// BFS 2차원 배열
	static int[][] Bgraph = new int[1001][1001];
	static boolean[] Dvisit = new boolean[10001];
	//N은 DFS, BFS 메소드에도 사용되어야 하기 때문에 필드로 선언
	static int N;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		int V = Integer.parseInt(st.nextToken());
		
		//간선을 그래프에 똑같이 저장
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			Dgraph[u][v] = Dgraph[v][u] = 1; // 인접 행렬사용
			Bgraph[u][v] = Bgraph[v][u] = 1;
		}
		DFS(V);
		System.out.println();
		BFS(V);
	}
	
	public static void DFS(int V) { 
		Dvisit[V] = true;
		System.out.print(V + " ");
		
		for(int i = 1; i <= N; i++) {
			if(!Dvisit[i] && Dgraph[V][i] == 1) {
				DFS(i);
			}
		}
	}
	
	public static void BFS(int V) { 
		boolean[] Bvisit = new boolean[10001];
		Queue<Integer> que = new LinkedList<Integer>();
		Bvisit[V] = true;
		que.offer(V);
		
		while(!que.isEmpty()) {
			int P = que.poll();
			System.out.print(P + " ");
			
			for(int i = 1; i <= N; i++) {
				if(!Bvisit[i] && Bgraph[P][i] == 1) {
					Bvisit[i] = true;
					que.offer(i);
				}
			}
		}
	}

}
