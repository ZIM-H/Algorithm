
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Boj_17135_캐슬디펜스 {
	static int n, m, d, ans, Diecnt;
	static int[][] map, tmp;
	static int[] pick;
	static Queue<Pos> q;
	static boolean[][] visit;
	static int[] dr = { -1, 0, 1, 0 };
	static int[] dc = { 0, 1, 0, -1 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		d = Integer.parseInt(st.nextToken());

		map = new int[n][m];
		pick = new int[3];
		ans = Integer.MIN_VALUE;

		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		comb(0, 0);
		System.out.println(ans);
	}

	private static void comb(int cnt, int start) {
		if (cnt == 3) {
			tmp = deepcopy();
			play();

			ans = Math.max(ans, Diecnt);
			return;
		}

		for (int i = start; i < m; i++) {
			pick[cnt] = i;
			comb(cnt + 1, i + 1);
		}

	}

	private static int[][] deepcopy() {
		int[][] tmp = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				tmp[i][j] = map[i][j];
			}
		}
		return tmp;
	}

	private static boolean check() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (tmp[i][j] == 1) {
					return false;
				}
			}
		}

		return true;
	}

	private static void play() {
		Diecnt = 0;
		while (true) {
			ArrayList<Pos> target = new ArrayList<>();
			for (int i = 0; i < 3; i++) {
				q = new ArrayDeque<>();
				visit = new boolean[n][m];

				q.add(new Pos(n - 1, pick[i], 0));
				visit[n - 1][pick[i]] = true;

				while (!q.isEmpty()) {
					Pos now = q.poll();

					if (tmp[now.r][now.c] == 1 && now.dis <= d) {
						target.add(new Pos(now.r, now.c, 1));
						break;
					}

					for (int d = 0; d < 4; d++) {
						int nr = now.r + dr[d];
						int nc = now.c + dc[d];

						if (nr < n && nc < m && nr >= 0 && nc >= 0 && !visit[nr][nc] && now.dis + 1 <= d) {
							q.add(new Pos(nr, nc, now.dis + 1));
							visit[nr][nc] = true;
						}
					}
				}

			}

			// 공격
			for (int i = 0; i < target.size(); i++) {
				if (tmp[target.get(i).r][target.get(i).c] == 1) {
					Diecnt++;
					tmp[target.get(i).r][target.get(i).c] = 0;
				}
			}
			print();

			// 이동
			for (int i = n - 1; i > 0; i--) {
				for (int j = 0; j < m; j++) {
					tmp[i][j] = tmp[i - 1][j];
					tmp[i - 1][j] = 0;
				}
			}

			if (check())
				break;
		}

	}

	static class Pos implements Comparable<Pos> {
		int r, c, dis;

		public Pos(int r, int c, int dis) {
			this.r = r;
			this.c = c;
			this.dis = dis;
		}

		@Override
		public int compareTo(Pos o) {
			return this.dis == o.dis ? this.c - o.c : this.dis - o.dis;
		}
	}

	static void print() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				System.out.print(tmp[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println("===========================");
	}
}
