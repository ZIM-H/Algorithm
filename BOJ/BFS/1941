

import java.io.BufferedReader;
import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;

public class Boj_1941_소문난칠공주 {
	static char[][] map;
	static int[][] tmp;
	static int[] pick;
	static int[] dr = {1,-1,0,0};
	static int[] dc = {0,0,1,-1};
	static int ans;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new java.io.InputStreamReader(System.in));
		map = new char[5][5];
		pick = new int[7];
		ans = 0;
		for(int i=0; i<5; i++) {
			String s = br.readLine();
			for(int j=0; j<5; j++) {
				map[i][j] = s.charAt(j);
			}
		}
		
		comb(0,0,0);
		System.out.println(ans);
	}
	private static void comb(int cnt, int start, int Scnt) {
		if(cnt == 7) {
			if(Scnt >= 4) mark();
			return;
		}
		
		for(int i=start; i<25; i++) {
			pick[cnt] = i;
			
			if(map[i/5][i%5]=='S') comb(cnt+1, i+1, Scnt+1);
			else comb(cnt+1, i+1, Scnt);
		}
	}
	
	private static void mark() {
		tmp = new int[5][5];
		
		int r = 0;
		int c = 0;
		for(int i=0; i<7; i++) {
			r = pick[i] / 5;
			c = pick[i] % 5;
			tmp[r][c] = 1;
		}
		
		
		if(bfs(tmp, pick[0] / 5, pick[0] % 5)) ans++;
		else return;
		
	}

	private static boolean bfs(int[][] tmpMap, int i, int j) {
		Queue<Pos> q = new ArrayDeque<>();
		boolean[][] visit = new boolean[5][5];
		q.add(new Pos(i, j));
		visit[i][j] = true;
		
		int cnt = 1;
		while(!q.isEmpty()) {
			Pos now = q.poll();
			for(int d=0; d<4; d++) {
				int nr = now.r + dr[d];
				int nc = now.c + dc[d];
				if(nr>=0 && nc>=0 && nr<5 && nc<5 && !visit[nr][nc] && tmpMap[nr][nc]==1) {
					q.add(new Pos(nr, nc));
					visit[nr][nc] = true;
					cnt++;
				}
			}
		}
		
		if(cnt == 7) return true;
		else return false;
		
		
	}

	static class Pos{
		int r, c;
		public Pos(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
}
