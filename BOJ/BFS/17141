
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int[][] map, tmp;
	static int[] num;
	static List<virus> q;
	static int n, m, vCnt, ans;
	static int[] dr = { 1, -1, 0, 0 };
	static int[] dc = { 0, 0, 1, -1 };

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		vCnt = 0;
		ans = Integer.MAX_VALUE;
		num = new int[m];
		map = new int[n][n];
		q = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < n; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 2) {
					q.add(new virus(i, j));
					map[i][j] = 0;
					vCnt++;
				}
			}
		}


		comb(0, 0);
		
		if(ans == 2147483647) System.out.println(-1);
		else System.out.println(ans);

	}

	private static void comb(int cnt, int start) {
		if (cnt == m) {
			if(bfs() != -1) {
				ans = Math.min(ans, bfs());
			}
			return;
		}

		for (int i = start; i < vCnt; i++) {
			num[cnt] = i;
			comb(cnt + 1, i + 1);
		}

	}

	private static int bfs() {
		boolean[][] visit = new boolean[n][n];
		Queue<virus> que = new ArrayDeque<>();
		tmp = deepcopy(map);
		int time = 0;

		for (int i = 0; i < num.length; i++) {
			que.add(q.get(num[i]));
			tmp[q.get(num[i]).r][q.get(num[i]).c] = 2;
		}

		while (!que.isEmpty()) {
			int flag = 0;
			int size = que.size();
			for (int i = 0; i < size; i++) {
				virus now = que.poll();
				for (int d = 0; d < 4; d++) {
					int nr = now.r + dr[d];
					int nc = now.c + dc[d];
					if (nr < n && nc < n && nr >= 0 && nc >= 0 && !visit[nr][nc] && tmp[nr][nc] == 0) {
						tmp[nr][nc] = 3;
						visit[nr][nc] = true;
						que.add(new virus(nr, nc));
						flag = 1;
					}
				}
			}
			if(flag == 1) time++;
		}

		
		if (check())
			return time;
		else
			return -1;
	}

	private static int[][] deepcopy(int[][] map2) {
		int[][] tmp = new int[map2.length][map2[0].length];
		for (int i = 0; i < map2.length; i++) {
			for (int j = 0; j < map2[0].length; j++) {
				tmp[i][j] = map2[i][j];
			}
		}
		return tmp;
	}

	private static boolean check() {
		int flag = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (tmp[i][j] == 0) {
					flag = 1;
				}
			}
		}

		if (flag == 1)
			return false;
		else
			return true;
	}

	static class virus {
		int r, c;

		public virus(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
}
