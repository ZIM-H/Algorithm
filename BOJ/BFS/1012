import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
	static int[] dr = { 1, -1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };

	static int[][] map;
	static int n, m, cnt;
	static boolean[][] visited;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int T = Integer.parseInt(br.readLine());
		for (int tc = 0; tc < T; tc++) {
			st = new StringTokenizer(br.readLine());
			m = Integer.parseInt(st.nextToken()); // 가로
			n = Integer.parseInt(st.nextToken()); // 세로
			int k = Integer.parseInt(st.nextToken()); // 배추 개수

			cnt = 0;
			map = new int[n][m];
			visited = new boolean[n][m];

			for (int j = 0; j < k; j++) {
				st = new StringTokenizer(br.readLine());
				int r = Integer.parseInt(st.nextToken());
				int c = Integer.parseInt(st.nextToken());
				map[c][r] = 1;
			}

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					if (!visited[i][j] && map[i][j] == 1) {
						dfs(i, j);
						cnt++;
					}
				}
			}

			System.out.println(cnt);

		}

	}

	private static void dfs(int r, int c) {
		Queue<Point> q = new ArrayDeque<>();
		visited[r][c] = true;

		q.add(new Point(r, c));

		while (!q.isEmpty()) {
			Point now = q.poll();
			for (int d = 0; d < 4; d++) {
				int nr = now.i + dr[d];
				int nc = now.j + dc[d];
				
				if(nr >= 0 && nc >=0 && nr < n && nc <m && !visited[nr][nc] &&map[nr][nc]==1) {
					q.add(new Point(nr, nc));
					visited[nr][nc] =true;
					
				}
			}
		}

	}

	static class Point {
		int i, j;

		public Point(int i, int j) {
			this.i = i;
			this.j = j;
		}
	}

}
