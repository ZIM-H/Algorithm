import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Boj_4485_녹색옷젤다 {
	static int n;
	static int[][] map;
	static int[][] visit;

	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, 1, -1 };

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int tc = 1;
		while (true) {
			n = sc.nextInt();
			if (n == 0)
				break;

			map = new int[n][n];
			visit = new int[n][n];

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					map[i][j] = sc.nextInt();
					visit[i][j] = Integer.MAX_VALUE;
				}
			}

			bfs();
			System.out.println("Problem "+tc+": "+visit[n-1][n-1]);
			tc++;

		}
	}

	private static void bfs() {
		Queue<Point> q = new LinkedList<>();
		q.add(new Point(0, 0));
		visit[0][0] = map[0][0];
		
		while(!q.isEmpty()) {
			Point now = q.poll();
			for(int d=0; d<4; d++) {
				int nr = now.i + dr[d];
				int nc = now.j + dc[d];
				
				if(nr>=0 && nc>=0 && nr<n && nc<n && visit[nr][nc] > visit[now.i][now.j]+map[nr][nc]){
					visit[nr][nc] = visit[now.i][now.j] + map[nr][nc];
					q.add(new Point(nr, nc));
				}
			}
		}
		
	}

	static class Point {
		int i, j;

		Point(int i, int j) {
			this.i = i;
			this.j = j;
		}
	}

}
