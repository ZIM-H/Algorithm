import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int r, c, cnt, max;
	static boolean[] visited;
	static char[][] board;
	static int[] dr = {-1,1,0,0};
	static int[] dc = {0,0,1,-1};
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());
		cnt = 0;
		board = new char[r][c];
		visited = new boolean[26];
		max = Integer.MIN_VALUE;

		for (int i = 0; i < r; i++) {
			String s = br.readLine();
			for (int j = 0; j < c; j++) {
				board[i][j] = s.charAt(j);
			}
		}
		
		visited[board[0][0]-65] = true;
		dfs(0,0,1);
		System.out.println(max);

	}
	private static void dfs(int i, int j, int cnt) {
		
		for(int d=0; d<4; d++) {
			int nr = i+dr[d];
			int nc = j+dc[d];
			
			if(nr>=0 && nc >=0 && nr<r && nc <c&&!visited[board[nr][nc]-65]) {
				visited[board[nr][nc]-65] = true;
				dfs(nr, nc, cnt+1);
				visited[board[nr][nc]-65] = false;
			
			}
		}
		
		max = Math.max(max, cnt);
	}

}
